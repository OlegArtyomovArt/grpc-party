buildscript {
    ext {
        springBootVersion = '2.1.0.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.7'
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: "idea"
apply plugin:  "com.google.protobuf"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"

group 'me.lecoding'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter')
    compile ('io.github.lognet:grpc-spring-boot-starter:3.0.0')
    compile 'org.springframework.boot:spring-boot-starter-log4j2'
    compile 'io.grpc:grpc-netty-shaded:1.16.1'
    compile 'io.grpc:grpc-protobuf:1.16.1'
    compile 'io.grpc:grpc-stub:1.16.1'
    compile 'com.google.protobuf:protobuf-java-util:3.5.1'
    compile 'org.springframework.boot:spring-boot-starter-security'
    compile 'org.springframework.security:spring-security-oauth2-core'
    compile 'org.springframework.security:spring-security-oauth2-jose'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
    testCompile 'org.spockframework.spock:spock-core:spock-1.2'
    testImplementation('org.springframework.boot:spring-boot-starter-test')
}
configurations{
    all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}

// protobuf gen code
protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.6.1'
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:1.16.1"
        }
    }
    generateProtoTasks {
        ofSourceSet('main')*.plugins {
            grpc { }
        }
    }
}

// idea ide
def generatedJava = file("${protobuf.generatedFilesBaseDir}/main/java")
def generatedGrpc = file("${protobuf.generatedFilesBaseDir}/main/grpc")
idea {
    module {
        generatedSourceDirs += generatedJava
        generatedSourceDirs += generatedGrpc
    }
}

task serverJar(type:Jar){
    manifest {
        attributes "Main-Class":"me.lecoding.grpclearning.ChatServer"
    }
    from{
        configurations.compile.collect{it.isDirectory()?it:zipTree(it)}
    }
    baseName = "chatServer"
    with jar
}

task clientJar(type:Jar){
    manifest {
        attributes "Main-Class":"me.lecoding.grpclearning.ChatClient"
    }
    from{
        configurations.compile.collect{it.isDirectory()?it:zipTree(it)}
    }
    baseName = "chatClient"
    with jar
}